set nu				"显示行号"
"自适应不同语言的智能缩进"
filetype indent on 
set expandtab	"将制表符扩展为空格"
set tabstop=4	"设置编辑时制表符占用空格数"
set shiftwidth=4	"设置格式化时制表符占用空格数"
set softtabstop=4   "让vim把连续数量的空格视为一个制表符"
inoremap ( ()<ESC>i
inoremap [ []<ESC>i
inoremap { {<CR>}<ESC>O		"花括号自动补全及缩进"
inoremap ' ''<ESC>i
inoremap " ""<ESC>i
"基于缩进或语法进行代码折叠"
set foldmethod=indent   
set foldmethod=syntax
"启动vim时关闭折叠代码"
set nofoldenable
"禁止光标闪烁"
set gcr=a:block-blinkon0
set hlsearch			"高亮显示所查关键字符"
set mouse=a			"Enable mouse usage (all modes)"


"括号自动删除"
function! RemovePairs()
	let l:line = getline(".")
	let l:previous_char = l:line[col(".")-1]
	if index(["(","[","{"],l:previous_char) != -1
		let l:original_pos = getpos(".")
		execute "normal %"
		let l:new_pos = getpos(".")

		if l:original_pos == l:new_pos
			execute "normal! a\<BS>"
			return
		end
		let l:line2 = getline(".")
		if len(l:line2) == col(".")
			execute "normal! v%xa"
		else 
			execute "normal! v%xi"
		end
	else
		execute "normal! a\<BS>"
	end
endfunction

inoremap <BS> <ESC>:call RemovePairs()<CR>a


"忽略多余右括号"
function! RemoveNextDoubleChar(char)
	let l:line = getline(".")
	let l:next_char = l:line[col(".")] "
	if a:char == l:next_char
		execute "normal! l"
	else
		execute "normal! i" . a:char . "" 
	end
endfunction

inoremap ) <ESC>:call RemoveNextDoubleChar(')')<CR>a
inoremap ] <ESC>:call RemoveNextDoubleChar(']')<CR>a
inoremap } <ESC>:call RemoveNextDoubleChar('}')<CR>a

#安装markdown插件
set nocompatible    
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'vundleVim/vundle.vim'

Plugin 'godlygeek/tabular'

Plugin 'plasticboy/vim-markdown'

Plugin 'suan/vim-instant-markdown'

call vundle#end()
filetype plugin indent on
